import jsonimport reimport copyfrom StringIO import StringIO# Configuration section!convertXidRegex=".*"inputFileLoc="/Users/tpacker/Documents/Work/Infinite/projects/JSON Config Scripts/config.json"outputFileLoc="/Users/tpacker/Documents/Work/Infinite/projects/JSON Config Scripts/config_out.json"baseVirtualSource=json.load(StringIO("""{         "xid":"VirtualEmulationSource",         "name":"VirtualEmulationSource",         "enabled":false,         "type":"VIRTUAL",         "alarmLevels":{            "POLL_ABORTED":"URGENT"         },         "purgeType":"YEARS",         "updatePeriodType":"MINUTES",         "updatePeriods":5,         "editPermission":"",         "purgeOverride":false,         "purgePeriod":1      }"""))baseAlphanum=json.load(StringIO("""{            "dataType":"ALPHANUMERIC",            "changeType":{               "type":"NO_CHANGE",               "startValue":"startValue"            },            "settable":true         }"""))		 baseNumeric=json.load(StringIO("""{            "dataType":"NUMERIC",            "changeType":{               "type":"INCREMENT_ANALOG",               "change":9.4,               "max":100.0,               "min":0.0,               "roll":true,               "startValue":"5"            },            "settable":true         }"""))		 baseMultistate=json.load(StringIO("""{            "dataType":"MULTISTATE",            "changeType":{               "type":"INCREMENT_MULTISTATE",               "roll":true,               "values":[                  0,                  1,                  2,                  3,                  4,                  5               ],               "startValue":"0"            },            "settable":true         }"""))baseBinary=json.load(StringIO("""{            "dataType":"BINARY",            "changeType":{               "type":"ALTERNATE_BOOLEAN",               "startValue":"true"            },            "settable":true         }"""))		 convertConfigFile = open(inputFileLoc)convertConfig = json.load(convertConfigFile)convertConfigFile.close()outputConfig = {"dataSources":[], "dataPoints":[]}def setPlByType(dp, type) :	del dp["pointLocator"]	if type == "NUMERIC" :		dp["pointLocator"] = copy.deepcopy(baseNumeric)	elif type == "ALPHANUMERIC" :		dp["pointLocator"] = copy.deepcopy(baseAlphanum)	elif type == "MULTISTATE" :		dp["pointLocator"] = copy.deepcopy(baseMultistate)	elif type == "BINARY" :		dp["pointLocator"] = copy.deepcopy(baseBinary)	else :		print "Unsupported regular type: " + typedef setPlByTypeId(dp, typeId) :	del dp["pointLocator"]	if typeId == 3 :		dp["pointLocator"] = copy.deepcopy(baseNumeric)	elif typeId == 4 :		dp["pointLocator"] = copy.deepcopy(baseAlphanum)	elif typeId == 2 :		dp["pointLocator"] = copy.deepcopy(baseMultistate)	elif typeId == 1 :		dp["pointLocator"] = copy.deepcopy(baseBinary)	else :		print "Unsupported regular type: " + typeIddef setPlByModbusType(dp, type) :	del dp["pointLocator"]	if re.search("BYTE", type) is not None :		dp["pointLocator"] = copy.deepcopy(baseNumeric)	elif type == "BINARY" :		dp["pointLocator"] = copy.deepcopy(baseBinary)	elif type == "CHAR" :		dp["pointLocator"] = copy.deepcopy(baseAlphanum)	else :		print "Unsupported modbus type: " + typedef getNewVirtualPnt(dp) :	result = copy.deepcopy(dp)	if "dataType" in dp["pointLocator"] :		setPlByType(result, dp["pointLocator"]["dataType"])	elif "modbusDataType" in dp["pointLocator"] :		setPlByModbusType(result, dp["pointLocator"]["modbusDataType"])	elif "dataTypeId" in dp["pointLocator"] :		setPlByTypeId(result, dp["pointLocator"]["dataTypeId"])	elif "attributeId" in dp["pointLocator"] :		setPlByType(result, "NUMERIC")	if result["chartColour"] is None :		result["chartColour"] = ""	return resultfor ds in convertConfig["dataSources"] :	if re.search(convertXidRegex, ds["xid"]) is not None :		newDs = copy.deepcopy(baseVirtualSource)		newDs["xid"] = ds["xid"]		newDs["name"] = ds["name"]		if "updatePeriodType" in ds :			newDs["updatePeriodType"] = ds["updatePeriodType"]			newDs["updatePeriods"] = ds["updatePeriods"]		outputConfig["dataSources"].append(newDs)		for dp in convertConfig["dataPoints"] :			if dp["dataSourceXid"] == ds["xid"] :				newPnt = getNewVirtualPnt(dp)				outputConfig["dataPoints"].append(newPnt)convertConfig["dataPoints"] = outputConfig["dataPoints"]convertConfig["dataSources"] = outputConfig["dataSources"]outputFile = open(outputFileLoc, "w+")outputFile.write(json.dumps(convertConfig, sort_keys=False, indent=4, separators=(',',': ')))outputFile.close()